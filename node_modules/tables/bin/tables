#! /usr/bin/env node

// Dependencies
var fs = require("fs");
var path = require("path");
var command = require("commander");
var _ = require("lodash");
var Tables = require("../index.js");
var output = require("../lib/output.js")(true);
var pkg = require("../package.json");


// Basic command line parts
command
  .description(pkg.description)
  .version(pkg.version);

// Options
var ls = "\n                                  ";
command.option("-i, --input [file]", "Input file to use.");
command.option("-d, --db [uri]", "The database URI to push data into.  By default, Tables will use " +
  ls + "the input option to create a SQLite database with " +
  ls + "the same path with a .sql extension, or for piping, " +
  ls + "it will create an SQLite database name tables-import.sql " +
  ls + "where the command is run. If you are using a password " +
  ls + "to access your database please consider using the " +
  ls + "TABLES_DB_URI environment variable for security reasons.");
command.option("-t, --type [type]", "Input type; determined from file name if not provided.  Valid " +
  ls + "values are csv, tsv, json, ndjson, html, or custom.  Defaults " +
  ls + "to csv if could not be determined.");
command.option("-e, --csv-headers [headers]", "Use the keyword, false, if there are no headers. " +
  ls + "Or use a comma separated list of headers. Defaults" +
  ls + "to reading headers from file.");
command.option("-l, --csv-delimiter [char]", "CSV delimiter character.  For tabs, use " +
  ls + "--csv-delimiter=$'\\t'.  Defaults to ,");
command.option("-q, --csv-quote [char]", "CSV quote character.  Defaults to \"");
command.option("-j, --json-path [path]", "JSON path to use for parsing rows. Default is *.  See JSONStream " +
  ls + "library for more info.");
command.option("-m, --html-selector [path]", "CSS selector to target specific HTML table for html input type.");
command.option("-n, --table-name [name]", "Use a specific table name.  By default the name of the input file is used.");
command.option("-k, --key [name]", "This is suggested.  A comma-delimited list of columns that " +
  ls + "define a unique key.  A unique key means that data can " +
  ls + "be updated instead of added to.  Should be used if models is not defined.");
command.option("-o, --output-config", "Output config (and guessed model).  Will not import.");
command.option("-a, --date-format [format]", "Date format to use when guessing date columns " +
  ls + "and parsing data.  Defaults to MM/DD/YYYY.  See moment.js for options.");
command.option("-A, --datetime-format [format]", "Date and time format to use when " +
  ls + "guessing datetime columns and parsing data.  Defaults to MM/DD/YYYY HH:mm:ss a. " +
  ls + "See moment.js for options.");
command.option("-p, --data [file]", "Path to data file for resuming streams.  Defaults to ~/.tables-data");
command.option("-z, --id [name]", "ID to use for resuming stream; if an input file is provided, " +
  ls + "this is used.  For CSV only.");
command.option("-b, --batch-size [num]", "Numbers of rows to import at once. Default is 1000");
command.option("-r, --restart", "WARNING Restarts any resuming, deletes existing data, and existing tables in DB.");
command.option("-s, --silent", "Suppress output besides errors.");
command.option("-u, --debug", "Output stack trace if available.");
command.option("-c, --config [file]", "Provide a JS file that exports configuration for Tables. " +
  ls + "This allows for the options that are not supported in the command line.");

// Parse
command.parse(process.argv);

// Validate input
var errors = isValid(command);
if (errors) {
  errors.forEach(function(e) {
    output.error(e);
  });

  process.exit(1);
}

// Make options for tables
var options = {
  input: command.input ? command.input : undefined,
  db: command.db ? command.db : undefined,
  inputType: command.type ? command.type : undefined,
  tableName: command.tableName ? command.tableName : undefined,
  key: command.key ? command.key : undefined,
  dataPath: command.data ? command.data : undefined,
  id: command.id ? command.id : undefined,
  dateFormat: command.dateFormat ? command.dateFormat : undefined,
  datetimeFormat: command.datetimeFormat ? command.datetimeFormat : undefined,
  batchSize: command.batchSize ? command.batchSize : undefined,
  outputConfig: !!command.outputConfig,
  restart: !!command.restart,
  output: !command.silent
};

// Input type specific options
if (command.jsonPath) {
  options.inputType = "json";
  options.inputOptions = { path: command.jsonPath };
}
if (command.htmlSelector) {
  options.inputType = "html";
  options.inputOptions = { selector: command.htmlSelector };
}
if (command.csvDelimiter || command.csvQuote) {
  options.inputType = "csv";
  options.inputOptions = {
    headers: (command.csvHeaders && command.csvHeaders.toLowerCase() === "false") ? false :
      (command.csvHeaders && command.csvHeaders.toLowerCase() === "true") ? undefined :
      (command.csvHeaders) ? command.csvHeaders.split(",") :
      undefined,
    delimiter: command.csvDelimiter ? command.csvDelimiter : undefined,
    quote: command.csvQuote ? command.csvQuote : undefined,
  };
}

// Handle config file
if (command.config) {
  try {
    options = _.defaultsDeep(options, require(path.join(process.cwd(), command.config)));
  }
  catch (e) {
    output.error("Unable to read in config file with require function.");
    process.exit(1);
  }
}

// Handle any errors that Tables throws
options.errorHandler = function(error) {
  if (command.debug && error.stack) {
    output.error(error.stack);
  }
  else if (error.message) {
    output.error(error.message);
  }
  else if (error.toString) {
    output.error(error.toString());
  }
  else {
    output.error("Unknown error.");
  }

  process.exit(1);
};

// Create tables
var t = new Tables(options);

// Validate input
function isValid(input) {
  var errors = [];

  // Check that input file exists if provided
  if (input.input && !fs.existsSync(input.input)) {
    errors.push("Input file provided does not exist.");
  }

  // Check for streaming input if file not provided
  if (!input.config && !input.input && process.stdin.isTTY) {
    errors.push("Input file not provided and no data was piped in.");
  }

  // Check that config file exists if provided
  if (input.config && !fs.existsSync(input.config)) {
    errors.push("Config file provided does not exist.");
  }

  return errors.length ? errors : false;
}
